trigger:
  branches:
    include:
    - '*'     # build all branches
  paths:
    exclude:
    - docs/*  # exclude the docs folder

pool:
  vmImage: 'ubuntu-16.04'
  demands:
  - npm

variables:
  buildConfiguration: 'Release'
  ngRootDir: './invoice-app/ClientApp'
  dotNetSdkVersion: '3.1.100'

steps:

- task: UseDotNet@2
  displayName: 'Use .NET Core SDK $(dotNetSdkVersion)'
  inputs:
    packageType: sdk
    version: $(dotNetSdkVersion) 
    
- task: UseDotNet@2
  displayName: 'Use .NET Core SDK 2.1.505 for SonarCloud'
  inputs:
    version: '2.1.505'

    
- script: 'sudo npm install -g @angular/cli'
  displayName: 'Install @Angular/Cli Global'  
    
- script: 'ng --version'
  displayName: 'Display @Angular/Cli Version Installed'
  

- script: 'npm install'
  displayName: 'Run npm install'
  workingDirectory: $(ngRootDir)


# - task: Npm@1
#   displayName: 'Build Frontend for Production'
#   inputs: 
#     verbose: false
#     command: custom
#     customCommand: run-script build-prod --prefix $(ngRootDir)
##### customCommand: run-script build-prod --prefix ./invoice-app/ClientApp


- script: 'echo "$(Build.DefinitionName), $(Build.BuildId), $(Build.BuildNumber)" > buildinfo.txt'
  displayName: 'Write build info'
  workingDirectory: ./invoice-app


- task: DotNetCoreCLI@2
  displayName: 'Restore project dependencies'
  inputs:
    command: 'restore'
    projects: '**/*.csproj'


- task: SonarCloudPrepare@1
  displayName: 'Prepare SonarCloud analysis'
  inputs:
    SonarCloud: '$(SonarCloundConnection)'
    organization: '$(SonarOrganization)'
    scannerMode: 'MSBuild'
    projectKey: '$(SonarProjectKey)'
    projectName: '$(SonarProjectName)'
    projectVersion: '$(Build.BuildNumber)'
    extraProperties: |
     sonar.cs.opencover.reportsPaths=$(Build.SourcesDirectory)/TestResults/Coverage/coverage.opencover.xml
     sonar.exclusions=**/wwwroot/lib/**/*


- task: DotNetCoreCLI@2
  displayName: 'Build the project - $(buildConfiguration)'
  inputs:
    command: 'build'
    arguments: '--no-restore --configuration $(buildConfiguration)'
    projects: '**/*.csproj'


- task: DotNetCoreCLI@2
  displayName: 'Install ReportGenerator'
  inputs:
    command: custom
    custom: tool
    arguments: 'install --global dotnet-reportgenerator-globaltool'


- task: DotNetCoreCLI@2
  displayName: 'Run unit tests - $(buildConfiguration)'
  inputs:
    command: 'test'
    arguments: '--no-build --configuration $(buildConfiguration) /p:CollectCoverage=true /p:CoverletOutputFormat="cobertura%2copencover" /p:CoverletOutput=$(Build.SourcesDirectory)/TestResults/Coverage/'
    publishTestResults: true
    projects: '**/*.Tests.csproj'


- script: 'sudo apt-get install tree && tree'
  displayName: 'Print Directory Tree For Test Results'
  workingDirectory: $(Build.SourcesDirectory)


- script: |
    reportgenerator -reports:$(Build.SourcesDirectory)/**/coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/CodeCoverage -reporttypes:HtmlInline_AzurePipelines
  displayName: 'Create code coverage report'
    #                         '/home/vsts/work/_temp/_fv-az14_2020-02-11_20_38_26.trx
    # The report file pattern '/home/vsts/work/1/s/**/coverage.cobertura.xml' is invalid. No matching files found.


- task: SonarCloudAnalyze@1
  displayName: 'Run SonarCloud code analysis'


- task: SonarCloudPublish@1
  displayName: 'Publish SonarCloud quality gate results'


- task: PublishCodeCoverageResults@1
  displayName: 'Publish code coverage report'
  inputs:
    codeCoverageTool: 'cobertura'
    summaryFileLocation: '$(Build.SourcesDirectory)/**/coverage.cobertura.xml'


- task: DotNetCoreCLI@2
  displayName: 'Publish the project - $(buildConfiguration)'
  inputs:
    command: 'publish'
    projects: '**/*.csproj'
    publishWebProjects: false
    arguments: '--no-build --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/$(buildConfiguration)'
    zipAfterPublish: true


- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: drop'
  condition: succeeded()
